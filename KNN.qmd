---
title: "Nearest Neighborhood Algorithm"
format: 
  html:
    theme: cosmo
    smooth-scroll: true
    toc: true
    toc-location: right
    # self-contained: true
# author: 
#     - name: J.I. Seo
#       affiliations:
#       - Gyeongguk National University
#     - name: J.W. Lee
#       # affiliations:
#       # - University of Missouri
      
number-sections: true
highlight-style: pygments
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
options(width=200)
```


> Nearest Neighborhood Algorithm의 장점
 
- 알고리듬이 매우 간단하여 이해하기 쉽다.
- 관측된 데이터셋에 대해 분포를 가정할 필요가 없다.
- 훈련하는 동안 계산적 비용이 거의 없다.

</br>

 > Nearest Neighborhood Algorithm의 단점
 
 - 범주형 예측 변수를 다룰 수 없다.
    - Dummy 또는 One-hot Encoding 변환 후 사용할 수 있다.
- 데이터셋의 크기가 큰 경우, 새로운 Case와 다른 Case들과의 거리 계산에 시간이 많이 걸릴 수 있다.
- 이상치와 노이즈가 있는 경우, 예측에 큰 영향을 미친다.
- 고차원의 경우, 성능이 좋지 않다.
    - 차원이 높아질수록 Case간 거리 차이가 거의 없는 것처럼 보여, 가장 가까운 거리를 찾는 것이 어렵다.

</br>

 > 실습 자료 : 1912년 4월 15일 타이타닉호 침몰 당시 탑승객들의 정보를 기록한 데이터셋이며, 총 11개의 변수를 포함하고 있다. 이 자료에서 **Target**은 `Survived`이다.

<center>![](./image/그림_titanic.png)</center>

<br />

<center><img src="./image/Titanic_표.png" width="400" height="400"></center>

<br />



## 데이터 불러오기
```{r, eval=F}
pacman::p_load("data.table", "dplyr", "tidyr",
               "ggplot2", "GGally",
               "caret",
               "doParallel", "parallel")                                 # For 병렬 처리

registerDoParallel(cores=detectCores())                                  # 사용할 Core 개수 지정                                  

titanic <- fread("../Titanic.csv")                                       # 데이터 불러오기

titanic %>%
  as_tibble
```

```{r, echo=F}
pacman::p_load("data.table", "dplyr", "tidyr",
               "ggplot2", "GGally",
               "caret",
               "doParallel", "parallel")                               # For 병렬 처리

registerDoParallel(cores=detectCores())                                # 사용할 Core 개수 지정

titanic <- fread(paste(getwd(), "/DATA/Titanic.csv", sep = "/"))             # 데이터 불러오기

titanic %>%
  as_tibble
```


## 데이터 전처리 I

```{r}
titanic %<>%
  data.frame() %>%                                                      # Data Frame 형태로 변환 
  mutate(Survived = ifelse(Survived == 1, "yes", "no"))                 # Target을 문자형 변수로 변환

# 1. Convert to Factor
fac.col <- c("Pclass", "Sex",
             # Target
             "Survived")

titanic <- titanic %>% 
  mutate_at(fac.col, as.factor)                                         # 범주형으로 변환

glimpse(titanic)                                                        # 데이터 구조 확인

# 2. Generate New Variable
titanic <- titanic %>%
  mutate(FamSize = SibSp + Parch)                                       # "FamSize = 형제 및 배우자 수 + 부모님 및 자녀 수"로 가족 수를 의미하는 새로운 변수

glimpse(titanic)                                                        # 데이터 구조 확인

# 3. Select Variables used for Analysis
titanic1 <- titanic %>% 
  select(Survived, Pclass, Sex, Age, Fare, FamSize)                     # 분석에 사용할 변수 선택

# 4. Convert One-hot Encoding for 범주형 예측 변수
dummies <- dummyVars(formula = ~ .,                                     # formula : ~ 예측 변수 / "." : data에 포함된 모든 변수를 의미
                     data = titanic1[,-1],                              # Dataset including Only 예측 변수 -> Target 제외
                     fullRank = FALSE)                                  # fullRank = TRUE : Dummy Variable, fullRank = FALSE : One-hot Encoding

titanic.Var   <- predict(dummies, newdata = titanic1) %>%               # 범주형 예측 변수에 대한 One-hot Encoding 변환
  data.frame()                                                          # Data Frame 형태로 변환 

glimpse(titanic.Var)                                                    # 데이터 구조 확인

# Combine Target with 변환된 예측 변수
titanic.df <- data.frame(Survived = titanic1$Survived, 
                         titanic.Var)

titanic.df %>%
  as_tibble

glimpse(titanic.df)                                                     # 데이터 구조 확인
```

## 데이터 탐색

```{r}
ggpairs(titanic.df,                                        
        aes(colour = Survived)) +                     # Target의 범주에 따라 색깔을 다르게 표현
  theme_bw()

ggpairs(titanic.df,                                     
        aes(colour = Survived, alpha = 0.8)) +        # Target의 범주에 따라 색깔을 다르게 표현
  scale_colour_manual(values = c("purple","cyan4")) + # 특정 색깔 지정
  scale_fill_manual(values = c("purple","cyan4")) +   # 특정 색깔 지정
  theme_bw()
```


## 데이터 분할

```{r}
# Partition (Training Dataset : Test Dataset = 7:3)
y      <- titanic.df$Survived                         # Target

set.seed(200)
ind    <- createDataPartition(y, p = 0.7, list  =T)   # Index를 이용하여 7:3으로 분할
titanic.trd <- titanic.df[ind$Resample1,]             # Training Dataset
titanic.ted <- titanic.df[-ind$Resample1,]            # Test Dataset
```

## 데이터 전처리 II

```{r}
# Imputation
titanic.trd.Imp <- titanic.trd %>% 
  mutate(Age = replace_na(Age, mean(Age, na.rm = TRUE)))                 # 평균으로 결측값 대체

titanic.ted.Imp <- titanic.ted %>% 
  mutate(Age = replace_na(Age, mean(titanic.trd$Age, na.rm = TRUE)))     # Training Dataset을 이용하여 결측값 대체
  
glimpse(titanic.trd.Imp)                                                 # 데이터 구조 확인
glimpse(titanic.ted.Imp)                                                 # 데이터 구조 확인
```

## 모형 훈련

Package `"caret"`은 통합 API를 통해 R로 기계 학습을 실행할 수 있는 매우 실용적인 방법을 제공한다. Package `"caret"`에서는 초모수의 최적의 조합을 찾는 방법으로 그리드 검색(Grid Search), 랜덤 검색(Random Search), 직접 탐색 범위 설정이 있다. 여기서는 초모수 `k`의 최적값을 찾기 위해 그리드 검색을 수행하였고, 이를 기반으로 직접 탐색 범위를 설정하였다. 아래는 그리드 검색을 수행하였을 때 결과이다.

```{r}
fitControl <- trainControl(method = "cv", number = 5, # 5-Fold Cross Validation (5-Fold CV)
                            allowParallel = TRUE)     # 병렬 처리
             
set.seed(200)                                         # For CV
knn.fit <- train(Survived ~ ., data = titanic.trd.Imp, 
                 trControl = fitControl ,
                 method = "knn", 
                 preProc = c("center", "scale"))      # Standardization for 예측 변수
knn.fit

plot(knn.fit)                                         # Plot
```

`Result!` 랜덤하게 결정된 3개의 `k` 값에 대한 정확도를 보여주며, `k` = 7일 때 정확도가 가장 높은 것을 알 수 있다. 따라서 그리드 검색을 통해 찾은 최적의 초모수 값 7 근처의 값들을 탐색 범위로 설정하여 훈련을 다시 수행할 수 있다.

```{r}
customGrid <- expand.grid(k = seq(5, 10, by = 1))     # k의 탐색 범위 

set.seed(200)                                         # For CV
knn.tune.fit <- train(Survived ~ ., data = titanic.trd.Imp, 
                      trControl = fitControl,
                      method = "knn", 
                      tuneGrid = customGrid,
                      preProc = c("center", "scale")) # Standardization for 예측 변수

knn.tune.fit

plot(knn.tune.fit)                                    # Plot

knn.tune.fit$bestTune                                 # k의 최적값
```

`Result!` `k` = 7일 때 정확도가 가장 높다는 것을 알 수 있으며, `k` = 7을 가지는 모형을 최적의 훈련된 모형으로 선택한다.

## 모형 평가

`Caution!` 모형 평가를 위해 `Test Dataset`에 대한 `예측 class/확률` 이 필요하며, 함수 `predict()`를 이용하여 생성한다. 

```{r}
# 예측 class 생성
knn.pred <- predict(knn.tune.fit,                                        
                    newdata = titanic.ted.Imp[,-1])   # Test Dataset including Only 예측 변수   

knn.pred %>%
  as_tibble
```

<br />

### ConfusionMatrix

```{r}
CM   <- caret::confusionMatrix(knn.pred, titanic.ted.Imp$Survived, 
                               positive = "yes")    # confusionMatrix(예측 class, 실제 class, positive = "관심 class")
CM
```

<br />

###  ROC 곡선

```{r}
# 예측 확률 생성 
test.knn.prob <- predict(knn.tune.fit, 
                         newdata = titanic.ted.Imp[,-1],    # Test Dataset including Only 예측 변수   
                         type = "prob")                     # 예측 확률 생성 

test.knn.prob %>%
  as_tibble
```

```{r}
test.knn.prob <- test.knn.prob[,2]                 # "Survived = yes"에 대한 예측 확률

ac  <- titanic.ted.Imp$Survived                    # Test Dataset의 실제 class   
pp  <- as.numeric(test.knn.prob)                   # 예측 확률을 수치형으로 변환
```


#### Package "pROC"

```{r}
pacman::p_load("pROC")

knn.roc  <- roc(ac, pp, plot=T, col="gray")        # roc(실제 class, 예측 확률)
auc      <- round(auc(knn.roc),3)
legend("bottomright", legend = auc, bty = "n")
```

`Caution!` Package `"pROC"`를 통해 출력한 ROC 곡선은 다양한 함수를 이용해서 그래프를 수정할 수 있다.

```{r}
# 함수 plot.roc() 이용
plot.roc(knn.roc,   
         col="gray",                               # Line Color
         print.auc = TRUE,                         # AUC 출력 여부
         print.auc.col = "red",                    # AUC 글씨 색깔
         print.thres = TRUE,                       # Cutoff Value 출력 여부
         print.thres.pch = 19,                     # Cutoff Value를 표시하는 도형 모양
         print.thres.col = "red",                  # Cutoff Value를 표시하는 도형의 색깔
         auc.polygon = TRUE,                       # 곡선 아래 면적에 대한 여부
         auc.polygon.col = "gray90")               # 곡선 아래 면적의 색깔
```


```{r}
# 함수 ggroc() 이용
ggroc(knn.roc) +
annotate(geom = "text", x = 0.9, y = 1.0,
label = paste("AUC = ", auc),
size = 5,
color="red") +
theme_bw()
```


#### Package "Epi"

```{r}
pacman::p_load("Epi")       
# install_version("etm", version = "1.1", repos = "http://cran.us.r-project.org")

ROC(pp, ac, plot = "ROC")                           # ROC(예측 확률, 실제 class)  

```


#### Package "ROCR"

```{r}
pacman::p_load("ROCR")

knn.pred <- prediction(pp, ac)                      # prediction(예측 확률, 실제 class)    

knn.perf <- performance(knn.pred, "tpr", "fpr")     # performance(, "민감도", "1-특이도")                      
plot(knn.perf, col = "gray")                        # ROC Curve

perf.auc   <- performance(knn.pred, "auc")          # AUC
auc        <- attributes(perf.auc)$y.values 
legend("bottomright", legend = auc, bty = "n")
```

<br />

### 향상 차트

#### Package "ROCR"

```{r}
knn.perf <- performance(knn.pred, "lift", "rpp")    # Lift Chart
plot(knn.perf, main = "lift curve", 
     colorize = T,                                  # Coloring according to cutoff
     lwd = 2)  

```


```{r, eval = F, echo=F, include=FALSE}
#### **2) Package "lift"**

pacman::p_load("lift")

ac.numeric <- ifelse(titanic.ted.Imp$Survived == "yes", 1, 0)         # Target을 수치형으로 변환

plotLift(test.knn.prob, ac.numeric, cumulative = T, n.buckets = 24)   # plotLift(7-2에서 생성한 예측 확률, 실제 class)
TopDecileLift(test.knn.prob, ac.numeric)		                          # Top 10%의 향상도 출력

```


