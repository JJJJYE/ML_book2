---
title: "XGBoost"
format: 
  html:
    theme: 
      light: Flatly
      dark: darkly
    smooth-scroll: true
    toc: true
    toc-location: right
    # self-contained: true
# author: 
#     - name: J.I. Seo
#       affiliations:
#       - Gyeongguk National University
#     - name: J.W. Lee
#       # affiliations:
#       # - University of Missouri
      
number-sections: true
highlight-style: pygments
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
options(width=200)
```

> XGBoost의 장점
 
- 병렬 처리를 사용하여 Gradient Boosting보다 속도가 빠르다.
- Gradient Boosting보다 정확도가 높다.
- 유연성이 좋다.
- 조기 종료가 가능하다.
- 규제를 통해 과적합을 방지할 수 있다.


</br>

> XGBoost의 단점

- Gradient Boosting보다 학습시간이 빠를 뿐 다른 기법에 비하면 느리다.
- 초모수(Hyperparameter)가 많다.
    - 적절하지 않은 초모수 값을 할당하면 오히려 성능이 나빠질 수 있다.

</br>
 
> 실습 자료 : 1912년 4월 15일 타이타닉호 침몰 당시 탑승객들의 정보를 기록한 데이터셋이며, 총 11개의 변수를 포함하고 있다. 이 자료에서 **Target**은 `Survived`이다.

<center>![](./image/그림_titanic.png)</center>

<br />

<center><img src="./image/Titanic_표.png" width="400" height="400"></center>

<br />

## 데이터 불러오기


```{r, eval=F}
pacman::p_load("data.table", 
               "tidyverse", 
               "dplyr", "tidyr",
               "ggplot2", "GGally",
               "caret",
               "xgboost",                                               # For xgb.importance
               "doParallel", "parallel")                                # For 병렬 처리

registerDoParallel(cores=detectCores())                                 # 사용할 Core 개수 지정  

titanic <- fread("../Titanic.csv")                                      # 데이터 불러오기

titanic %>%
  as_tibble
```

```{r, echo=F}
pacman::p_load("data.table", 
               "tidyverse", 
               "dplyr", "tidyr",
               "ggplot2", "GGally",
               "caret",
               "doParallel", "parallel")                                # For 병렬 처리

registerDoParallel(cores=detectCores())                                 # 사용할 Core 개수 지정  

titanic <- fread(paste(getwd(), "/DATA/Titanic.csv", sep = "/"))              # 데이터 불러오기

titanic %>%
  as_tibble
```



## 데이터 전처리 I

```{r}
titanic %<>%
  data.frame() %>%                                                      # Data Frame 형태로 변환 
  mutate(Survived = ifelse(Survived == 1, "yes", "no"))                 # Target을 문자형 변수로 변환

# 1. Convert to Factor
fac.col <- c("Pclass", "Sex",
             # Target
             "Survived")

titanic <- titanic %>% 
  mutate_at(fac.col, as.factor)                                         # 범주형으로 변환

glimpse(titanic)                                                        # 데이터 구조 확인

# 2. Generate New Variable
titanic <- titanic %>%
  mutate(FamSize = SibSp + Parch)                                       # "FamSize = 형제 및 배우자 수 + 부모님 및 자녀 수"로 가족 수를 의미하는 새로운 변수

glimpse(titanic)                                                        # 데이터 구조 확인

# 3. Select Variables used for Analysis
titanic1 <- titanic %>% 
  dplyr::select(Survived, Pclass, Sex, Age, Fare, FamSize)              # 분석에 사용할 변수 선택

glimpse(titanic1)                                                       # 데이터 구조 확인
```

## 데이터 탐색

```{r}
ggpairs(titanic1,                                        
        aes(colour = Survived)) +                         # Target의 범주에 따라 색깔을 다르게 표현
  theme_bw()

ggpairs(titanic1,                                     
        aes(colour = Survived, alpha = 0.8)) +            # Target의 범주에 따라 색깔을 다르게 표현
  scale_colour_manual(values = c("purple","cyan4")) +     # 특정 색깔 지정
  scale_fill_manual(values = c("purple","cyan4")) +       # 특정 색깔 지정
  theme_bw()
```


## 데이터 분할

```{r}
# Partition (Training Dataset : Test Dataset = 7:3)
y      <- titanic1$Survived                           # Target

set.seed(200)
ind    <- createDataPartition(y, p = 0.7, list  =T)   # Index를 이용하여 7:3으로 분할
titanic.trd <- titanic1[ind$Resample1,]               # Training Dataset
titanic.ted <- titanic1[-ind$Resample1,]              # Test Dataset
```

## 데이터 전처리 II

```{r}
# Imputation
titanic.trd.Imp <- titanic.trd %>% 
  mutate(Age = replace_na(Age, mean(Age, na.rm = TRUE)))                 # 평균으로 결측값 대체

titanic.ted.Imp <- titanic.ted %>% 
  mutate(Age = replace_na(Age, mean(titanic.trd$Age, na.rm = TRUE)))     # Training Dataset을 이용하여 결측값 대체

glimpse(titanic.trd.Imp)                                                 # 데이터 구조 확인
glimpse(titanic.ted.Imp)                                                 # 데이터 구조 확인
```

## 모형 훈련

Boosting은 다수의 약한 학습자(간단하면서 성능이 낮은 예측 모형)을 순차적으로 학습하는 앙상블 기법이다. Boosting의 특징은 이전 모형의 오차를 반영하여 다음 모형을 생성하며, 오차를 개선하는 방향으로 학습을 수행한다.

<center>![](./image/boosting.png)</center>

</br>


XGBoost는 Extreme Gradient Boosting의 약어로 Gradient Boosting의 단점을 해결하기 위해 제안되었다.  
Package `"caret"`은 통합 API를 통해 R로 기계 학습을 실행할 수 있는 매우 실용적인 방법을 제공한다. Package `"caret"`에서는 초모수의 최적의 조합을 찾는 방법으로 그리드 검색(Grid Search), 랜덤 검색(Random Search), 직접 탐색 범위 설정이 있다. 여기서는 초모수 `eta`, `max_depth`, `gamma`, `colsample_bytree`, `min_child_weight`, `subsample`, `nrounds`의 최적의 조합값을 찾기 위해 그리드 검색을 수행하였고, 이를 기반으로 직접 탐색 범위를 설정하였다. 아래는 그리드 검색을 수행하였을 때 결과이다.

<center>
![](./image/xgb.hy.png){width=70%}
</center>

</br>


```{r}
fitControl <- trainControl(method = "cv", number = 5, # 5-Fold Cross Validation (5-Fold CV)
                           allowParallel = TRUE)      # 병렬 처리

set.seed(200)                                         # For CV
xgb.fit <- train(Survived ~ ., data = titanic.trd.Imp, 
                 trControl = fitControl ,
                 method = "xgbTree")                
```

`Caution!` Package `"caret"`을 통해 `"xgbTree"`를 수행하는 경우, 함수 `train(Target ~ 예측 변수, data)`를 사용하면 범주형 예측 변수는 자동적으로 더미 변환이 된다. 범주형 예측 변수에 대해 더미 변환을 수행하고 싶지 않다면 함수 `train(x = 예측 변수만 포함하는 데이터셋, y = Target만 포함하는 데이터셋)`를 사용한다.


```{r}
xgb.fit

plot(xgb.fit)                                         # Plot 
```


`Result!` 랜덤하게 결정된 초모수 값을 조합하여 만든 108개의 초모수 조합값 (`eta`, `max_depth`, `gamma`, `colsample_bytree`, `min_child_weight`, `subsample`,  `nrounds`)에 대한 정확도를 보여주며, (`eta` = 0.4, `max_depth` = 2, `gamma` = 0, `colsample_bytree` = 0.6, `min_child_weight` = 1, `subsample` = 0.5, `nrounds` = 100)일 때 정확도가 가장 높은 것을 알 수 있다. 따라서 그리드 검색을 통해 찾은 최적의 초모수 조합값 (`eta` = 0.4, `max_depth` = 2, `gamma` = 0, `colsample_bytree` = 0.6, `min_child_weight` = 1, `subsample` = 0.5, `nrounds` = 100) 근처의 값들을 탐색 범위로 설정하여 훈련을 다시 수행할 수 있다.


```{r}
customGrid <- expand.grid(eta = seq(0.3, 0.5, by = 0.1),              # eta의 탐색 범위
                          max_depth = seq(1, 3, by = 1),              # max_depth의 탐색 범위
                          gamma = seq(0.1, 1, by = 0.5),              # gamma의 탐색 범위
                          colsample_bytree = seq(0.5, 0.7, by = 0.1), # colsample_bytree의 탐색 범위
                          min_child_weight = seq(1, 2, by = 1),       # min_child_weight의 탐색 범위
                          subsample = seq(0.45, 0.55, by = 0.1),      # subsample의 탐색 범위
                          nrounds = seq(99, 101, by = 1))             # nrounds의 탐색 범위

set.seed(200)                                                         # For CV
xgb.tune.fit <- train(Survived ~ ., data = titanic.trd.Imp, 
                      trControl = fitControl ,
                      method = "xgbTree",
                      tuneGrid = customGrid)

xgb.tune.fit

xgb.tune.fit$bestTune                                                 # 최적의 초모수 조합값
```
  
`Result!` (`eta` = 0.4, `max_depth` = 2, `gamma` = 0.6, `colsample_bytree` = 0.7, `min_child_weight` = 2, `subsample` = 0.55, `nrounds` = 101)일 때 정확도가 가장 높은 것을 알 수 있으며, (`eta` = 0.4, `max_depth` = 2, `gamma` = 0.6, `colsample_bytree` = 0.7, `min_child_weight` = 2, `subsample` = 0.55, `nrounds` = 101)를 가지는 모형을 최적의 훈련된 모형으로 선택한다.


```{r}
# 변수 중요도
importance <- xgboost::xgb.importance(model =  xgb.tune.fit$finalModel)

importance

# 변수 중요도 plot
xgboost::xgb.plot.importance(importance_matrix = importance) 
```

`Result!` 변수 `Fare`이 Target `Survived`을 분류하는 데 있어 중요하다.


## 모형 평가

`Caution!` 모형 평가를 위해 `Test Dataset`에 대한 `예측 class/확률` 이 필요하며, 함수 `predict()`를 이용하여 생성한다. 

```{r}
# 예측 class 생성 
test.xgb.class <- predict(xgb.tune.fit,
                          newdata = titanic.ted.Imp[,-1]) # Test Dataset including Only 예측 변수 

test.xgb.class
```

<br />

### ConfusionMatrix

```{r}
CM   <- caret::confusionMatrix(test.xgb.class, titanic.ted.Imp$Survived, 
                               positive = "yes")       # confusionMatrix(예측 class, 실제 class, positive = "관심 class")
CM
```

<br />

### ROC 곡선

```{r}
# 예측 확률 생성
test.xgb.prob <- predict(xgb.tune.fit, 
                         newdata = titanic.ted.Imp[,-1], # Test Dataset including Only 예측 변수  
                         type = "prob")                  # 예측 확률 생성     

test.xgb.prob %>%
  as_tibble

test.xgb.prob <- test.xgb.prob[,2]                       # "Survived = yes"에 대한 예측 확률

ac  <- titanic.ted.Imp$Survived                          # Test Dataset의 실제 class 
pp  <- as.numeric(test.xgb.prob)                         # 예측 확률을 수치형으로 변환
```

#### Package "pROC"

```{r}
pacman::p_load("pROC")

xgb.roc  <- roc(ac, pp, plot = T, col = "gray")        # roc(실제 class, 예측 확률)
auc      <- round(auc(xgb.roc), 3)
legend("bottomright", legend = auc, bty = "n")
```

`Caution!` Package `"pROC"`를 통해 출력한 ROC 곡선은 다양한 함수를 이용해서 그래프를 수정할 수 있다.

```{r}
# 함수 plot.roc() 이용
plot.roc(xgb.roc,   
         col="gray",                                   # Line Color
         print.auc = TRUE,                             # AUC 출력 여부
         print.auc.col = "red",                        # AUC 글씨 색깔
         print.thres = TRUE,                           # Cutoff Value 출력 여부
         print.thres.pch = 19,                         # Cutoff Value를 표시하는 도형 모양
         print.thres.col = "red",                      # Cutoff Value를 표시하는 도형의 색깔
         auc.polygon = TRUE,                           # 곡선 아래 면적에 대한 여부
         auc.polygon.col = "gray90")                   # 곡선 아래 면적의 색깔
```


```{r}
# 함수 ggroc() 이용
ggroc(xgb.roc) +
annotate(geom = "text", x = 0.9, y = 1.0,
label = paste("AUC = ", auc),
size = 5,
color="red") +
theme_bw()
```



#### Package "Epi"

```{r}
pacman::p_load("Epi")       
# install_version("etm", version = "1.1", repos = "http://cran.us.r-project.org")

ROC(pp, ac, plot = "ROC")                              # ROC(예측 확률, 실제 class)  
```

#### Package "ROCR"

```{r}
pacman::p_load("ROCR")

xgb.pred <- prediction(pp, ac)                         # prediction(예측 확률, 실제 class) 

xgb.perf <- performance(xgb.pred, "tpr", "fpr")        # performance(, "민감도", "1-특이도")                      
plot(xgb.perf, col = "gray")                           # ROC Curve

perf.auc   <- performance(xgb.pred, "auc")             # AUC
auc        <- attributes(perf.auc)$y.values
legend("bottomright", legend = auc, bty = "n")
```

<br />

### 향상 차트

#### Package "ROCR"

```{r}
xgb.perf <- performance(xgb.pred, "lift", "rpp")       # Lift Chart                      
plot(xgb.perf, main = "lift curve",
     colorize = T,                                     # Coloring according to cutoff 
     lwd = 2) 
```


```{r, eval=F, echo=F, include=FALSE}
#### **2) Package "lift"**

pacman::p_load("lift")

ac.numeric <- ifelse(titanic.ted.Imp$Survived == "yes", 1, 0)         # Target을 수치형으로 변환

plotLift(test.svm.prob, ac.numeric, cumulative = T, n.buckets = 24)   # plotLift(7-2에서 생성한 예측 확률, 실제 class)
TopDecileLift(test.svm.prob, ac.numeric)		                          # Top 10%의 향상도 출력
```